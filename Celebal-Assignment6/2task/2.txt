Task: Kubernetes service types (ClusterIP, NodePort, LoadBalancer)

âœ… What is a Kubernetes Service?
A Service in Kubernetes exposes a group of Pods as a network service. Even if Pods die or are recreated, the Service keeps the same IP and DNS.

ðŸ”¹ 1. ClusterIP (default)
ðŸ“˜ What it is:
Exposes the service internally within the cluster.

Cannot be accessed from outside the cluster.

ðŸ“‚ Use case:
Internal communication between microservices.
ðŸ”§ Steps to Create ClusterIP
Step 1: Create a Pod or Deployment

# nginx-deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: nginx-deployment
spec:
  replicas: 2
  selector:
    matchLabels:
      app: nginx
  template:
    metadata:
      labels:
        app: nginx
    spec:
      containers:
      - name: nginx
        image: nginx
        ports:
        - containerPort: 80

Apply it:
kubectl apply -f nginx-deployment.yaml

Step 2: Create ClusterIP Service

# clusterip-service.yaml
apiVersion: v1
kind: Service
metadata:
  name: nginx-clusterip
spec:
  type: ClusterIP
  selector:
    app: nginx
  ports:
    - port: 80
      targetPort: 80

Apply it:
kubectl apply -f clusterip-service.yaml
kubectl get svc

To test from inside a pod:
kubectl run testpod --image=busybox -it -- sh
wget --spider nginx-clusterip

ðŸ”¹ 2. NodePort
ðŸ“˜ What it is:
Exposes the service on each Nodeâ€™s IP at a static port.

You can access it using:
http://<NodeIP>:<NodePort>

ðŸ“‚ Use case:
Accessing apps for testing from outside the cluster (without a LoadBalancer).
ðŸ”§ Steps to Create NodePort Service
   # nodeport-service.yaml
apiVersion: v1
kind: Service
metadata:
  name: nginx-nodeport
spec:
  type: NodePort
  selector:
    app: nginx
  ports:
    - port: 80
      targetPort: 80
      nodePort: 30036   # Must be between 30000-32767

Apply:
kubectl apply -f nodeport-service.yaml
kubectl get svc

Access using:
http://<NodeIP>:30036


ðŸ”¹ 3. LoadBalancer
ðŸ“˜ What it is:
Provisions an external cloud load balancer.

Works with cloud providers like AWS, Azure, GCP.

Exposes service to internet with external IP.

ðŸ“‚ Use case:
Production applications.

ðŸ”§ Steps to Create LoadBalancer Service
  
   # loadbalancer-service.yaml
apiVersion: v1
kind: Service
metadata:
  name: nginx-loadbalancer
spec:
  type: LoadBalancer
  selector:
    app: nginx
  ports:
    - port: 80
      targetPort: 80

Apply:
kubectl apply -f loadbalancer-service.yaml
kubectl get svc


